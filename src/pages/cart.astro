---
import DefaultLayout from '../layouts/DefaultLayout.astro';
---

<DefaultLayout title="Shopping Cart - CoolBudgetTech" showSidebar={false}>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <div class="mx-auto max-w-7xl px-4 pt-32 pb-8 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Shopping Cart</h1>
        <p class="mt-2 text-gray-600 dark:text-gray-300">
          Review your items and proceed to checkout when ready.
        </p>
      </div>

      <!-- Cart Content -->
      <div id="cart-container" class="grid grid-cols-1 gap-8 lg:grid-cols-3">
        <!-- Snipcart Integration -->
        <div class="lg:col-span-3">
          <!-- Test Mode Notice -->
          <div class="mb-6 bg-yellow-50 dark:bg-yellow-900 border border-yellow-200 dark:border-yellow-700 rounded-lg p-4">
            <div class="flex items-center">
              <svg class="h-5 w-5 text-yellow-600 dark:text-yellow-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
              </svg>
              <span class="text-yellow-800 dark:text-yellow-200 font-medium">Test Mode Active</span>
              <span class="text-yellow-700 dark:text-yellow-300 ml-2">- No real charges will be made</span>
            </div>
          </div>

          <!-- Cart will be handled by Snipcart -->
          <div class="text-center py-16" id="cart-fallback">
            <div class="mx-auto h-24 w-24 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mb-6">
              <svg class="h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.68 8.32a2 2 0 01-1.98 1.68H3M16 16a3 3 0 100 6 3 3 0 000-6zm0 0a3 3 0 00-3 3m3-3a3 3 0 013 3M9 19a3 3 0 100 6 3 3 0 000-6z"></path>
              </svg>
            </div>
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Your cart is empty</h2>
            <p class="text-gray-600 dark:text-gray-300 mb-8 max-w-md mx-auto">
              Looks like you haven't added any items to your cart yet. Start browsing our products to find great deals on tech and music gear.
            </p>
            <div class="space-y-4 sm:space-y-0 sm:space-x-4 sm:flex sm:justify-center">
              <a href="/products" class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">
                Browse Products
              </a>
              <a href="/categories" class="inline-flex items-center justify-center px-6 py-3 border border-gray-300 text-base font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700">
                Shop by Category
              </a>
            </div>
            
            <!-- Quick Cart Access -->
            <div class="mt-8">
              <button 
                id="quick-view-cart-btn"
                class="inline-flex items-center px-6 py-3 border border-indigo-600 text-base font-medium rounded-md text-indigo-600 bg-white hover:bg-indigo-50 dark:bg-gray-800 dark:text-indigo-400 dark:hover:bg-gray-700"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path>
                </svg>
                Quick View Cart
              </button>
            </div>
            
            <!-- Featured Products -->
            <div class="mt-16">
              <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-6">Popular Products</h3>
              <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
                <!-- Product 1 -->
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
                  <div class="aspect-w-1 aspect-h-1 w-full overflow-hidden rounded-lg bg-gray-200 dark:bg-gray-700 mb-4">
                    <div class="h-48 bg-gradient-to-br from-blue-400 to-indigo-600 flex items-center justify-center">
                      <span class="text-white text-sm font-medium">Product Image</span>
                    </div>
                  </div>
                  <h4 class="text-sm font-medium text-gray-900 dark:text-white">Wireless Headphones</h4>
                  <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">£29.99</p>
                  <button 
                    class="snipcart-add-item mt-3 w-full bg-indigo-600 text-white px-3 py-2 rounded-md text-sm hover:bg-indigo-700"
                    data-item-id="sample-headphones"
                    data-item-name="Wireless Headphones"
                    data-item-price="29.99"
                    data-item-url="/products/wireless-headphones"
                    data-item-description="High-quality wireless headphones with noise cancellation"
                    data-item-image="https://placehold.co/400x400/3B82F6/FFFFFF?text=Headphones"
                    data-item-categories="Headphones"
                  >
                    Add to Cart
                  </button>
                </div>
                
                <!-- Product 2 -->
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
                  <div class="aspect-w-1 aspect-h-1 w-full overflow-hidden rounded-lg bg-gray-200 dark:bg-gray-700 mb-4">
                    <div class="h-48 bg-gradient-to-br from-green-400 to-blue-600 flex items-center justify-center">
                      <span class="text-white text-sm font-medium">Product Image</span>
                    </div>
                  </div>
                  <h4 class="text-sm font-medium text-gray-900 dark:text-white">USB Cable Pack</h4>
                  <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">£9.99</p>
                  <button 
                    class="snipcart-add-item mt-3 w-full bg-indigo-600 text-white px-3 py-2 rounded-md text-sm hover:bg-indigo-700"
                    data-item-id="sample-usb-cables"
                    data-item-name="USB Cable Pack"
                    data-item-price="9.99"
                    data-item-url="/products/usb-cable-pack"
                    data-item-description="Pack of 3 high-quality USB cables"
                    data-item-image="https://placehold.co/400x400/10B981/FFFFFF?text=USB+Cables"
                    data-item-categories="Accessories"
                  >
                    Add to Cart
                  </button>
                </div>
                
                <!-- Product 3 -->
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
                  <div class="aspect-w-1 aspect-h-1 w-full overflow-hidden rounded-lg bg-gray-200 dark:bg-gray-700 mb-4">
                    <div class="h-48 bg-gradient-to-br from-purple-400 to-pink-600 flex items-center justify-center">
                      <span class="text-white text-sm font-medium">Product Image</span>
                    </div>
                  </div>
                  <h4 class="text-sm font-medium text-gray-900 dark:text-white">Phone Stand</h4>
                  <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">£14.99</p>
                  <button 
                    class="snipcart-add-item mt-3 w-full bg-indigo-600 text-white px-3 py-2 rounded-md text-sm hover:bg-indigo-700"
                    data-item-id="sample-phone-stand"
                    data-item-name="Phone Stand"
                    data-item-price="14.99"
                    data-item-url="/products/phone-stand"
                    data-item-description="Adjustable phone stand for desk use"
                    data-item-image="https://placehold.co/400x400/8B5CF6/FFFFFF?text=Phone+Stand"
                    data-item-categories="Accessories"
                  >
                    Add to Cart
                  </button>
                </div>
                
                <!-- Product 4 -->
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
                  <div class="aspect-w-1 aspect-h-1 w-full overflow-hidden rounded-lg bg-gray-200 dark:bg-gray-700 mb-4">
                    <div class="h-48 bg-gradient-to-br from-yellow-400 to-orange-600 flex items-center justify-center">
                      <span class="text-white text-sm font-medium">Product Image</span>
                    </div>
                  </div>
                  <h4 class="text-sm font-medium text-gray-900 dark:text-white">Bluetooth Speaker</h4>
                  <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">£39.99</p>
                  <button 
                    class="snipcart-add-item mt-3 w-full bg-indigo-600 text-white px-3 py-2 rounded-md text-sm hover:bg-indigo-700"
                    data-item-id="sample-bluetooth-speaker"
                    data-item-name="Bluetooth Speaker"
                    data-item-price="39.99"
                    data-item-url="/products/bluetooth-speaker"
                    data-item-description="Portable Bluetooth speaker with excellent sound quality"
                    data-item-image="https://placehold.co/400x400/F59E0B/FFFFFF?text=Speaker"
                    data-item-categories="Audio"
                  >
                    Add to Cart
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Detailed Cart View (separate from fallback) -->
          <div id="detailed-cart" class="mt-8" style="display: none;">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-6">Cart Details</h3>
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow">
              <div class="p-6">
                <div id="cart-items-detailed" class="space-y-4">
                  <!-- Cart items will be populated here -->
                </div>
                <div class="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
                  <div class="flex justify-between text-lg font-medium">
                    <span class="text-gray-900 dark:text-white">Total</span>
                    <span id="cart-total" class="text-gray-900 dark:text-white">£0.00</span>
                  </div>
                  <div class="mt-6">
                    <button id="custom-checkout-btn" class="w-full flex justify-center items-center px-6 py-3 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-indigo-600 hover:bg-indigo-700">
                      Proceed to Checkout
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Cart Items (hidden by default, shown when cart has items) -->
        <div id="cart-items" class="lg:col-span-2 hidden">
          <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
            <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
              <h2 class="text-lg font-medium text-gray-900 dark:text-white">Cart Items</h2>
            </div>
            <div id="cart-items-list" class="divide-y divide-gray-200 dark:divide-gray-700">
              <!-- Cart items will be populated here by JavaScript -->
            </div>
          </div>
        </div>

        <!-- Order Summary (hidden by default, shown when cart has items) -->
        <div id="order-summary" class="lg:col-span-1 hidden">
          <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
            <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
              <h2 class="text-lg font-medium text-gray-900 dark:text-white">Order Summary</h2>
            </div>
            <div class="px-6 py-4 space-y-4">
              <div class="flex justify-between text-sm">
                <span class="text-gray-600 dark:text-gray-300">Subtotal</span>
                <span id="subtotal" class="text-gray-900 dark:text-white">£0.00</span>
              </div>
              <div class="flex justify-between text-sm">
                <span class="text-gray-600 dark:text-gray-300">Shipping</span>
                <span id="shipping" class="text-gray-900 dark:text-white">£3.99</span>
              </div>
              <div class="flex justify-between text-sm">
                <span class="text-gray-600 dark:text-gray-300">VAT (20%)</span>
                <span id="vat" class="text-gray-900 dark:text-white">£0.00</span>
              </div>
              <div class="border-t border-gray-200 dark:border-gray-700 pt-4">
                <div class="flex justify-between text-base font-medium">
                  <span class="text-gray-900 dark:text-white">Total</span>
                  <span id="total" class="text-gray-900 dark:text-white">£0.00</span>
                </div>
              </div>
              
              <!-- Promo Code -->
              <div class="border-t border-gray-200 dark:border-gray-700 pt-4">
                <label for="promo-code" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Promo Code
                </label>
                <div class="flex space-x-2">
                  <input 
                    type="text" 
                    id="promo-code" 
                    placeholder="Enter code"
                    class="flex-1 rounded-md border-gray-300 py-2 px-3 text-sm focus:border-indigo-500 focus:ring-indigo-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                  >
                  <button class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md text-sm hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-300 dark:hover:bg-gray-500">
                    Apply
                  </button>
                </div>
              </div>
            </div>
            
            <!-- Checkout Button -->
            <div class="px-6 py-4 border-t border-gray-200 dark:border-gray-700">
              <button id="sidebar-checkout-btn" class="w-full bg-indigo-600 text-white px-4 py-3 rounded-md font-medium hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Proceed to Checkout
              </button>
              
              <!-- Security Badge -->
              <div class="mt-4 flex items-center justify-center text-sm text-gray-500 dark:text-gray-400">
                <svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                </svg>
                Secure checkout
              </div>
            </div>
          </div>
          
          <!-- Trust Signals -->
          <div class="mt-6 bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
            <h3 class="text-sm font-medium text-gray-900 dark:text-white mb-3">Why shop with us?</h3>
            <div class="space-y-2 text-xs text-gray-600 dark:text-gray-300">
              <div class="flex items-center">
                <svg class="h-4 w-4 mr-2 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                Free delivery on orders over £50
              </div>
              <div class="flex items-center">
                <svg class="h-4 w-4 mr-2 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                30-day returns policy
              </div>
              <div class="flex items-center">
                <svg class="h-4 w-4 mr-2 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                Secure payment processing
              </div>
              <div class="flex items-center">
                <svg class="h-4 w-4 mr-2 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
                UK customer support
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</DefaultLayout>

<script>
  // Snipcart integration and cart functionality
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, checking for Snipcart...');
    
    // Try immediate check first
    if (window.Snipcart && window.Snipcart.api && window.Snipcart.api.items) {
      console.log('Snipcart already available');
      checkAndDisplayCart();
    }
    
    // Wait for Snipcart to be loaded
    document.addEventListener('snipcart.ready', () => {
      console.log('Snipcart is ready!');
      
      // Check immediately
      checkAndDisplayCart();
      
      // Also check after a delay
      setTimeout(() => {
        checkAndDisplayCart();
      }, 500);
      
      // Initialize Snipcart events
      Snipcart.events.on('cart.opened', () => {
        console.log('Cart opened');
      });
      
      Snipcart.events.on('cart.closed', () => {
        console.log('Cart closed');
      });
      
      // Listen for cart changes
      Snipcart.events.on('cart.confirmed', (cartConfirmResponse) => {
        console.log('Cart confirmed:', cartConfirmResponse);
        checkAndDisplayCart();
      });
      
      Snipcart.events.on('item.added', (cartItem) => {
        console.log('Item added to cart:', cartItem);
        showNotification(`${cartItem.name} added to cart!`, 'success');
        // Delay to allow cart to update
        setTimeout(() => {
          checkAndDisplayCart();
        }, 100);
      });
      
      Snipcart.events.on('item.removed', (cartItem) => {
        console.log('Item removed from cart:', cartItem);
        showNotification(`${cartItem.name} removed from cart`, 'info');
        setTimeout(() => {
          checkAndDisplayCart();
        }, 100);
      });
      
      // Listen for cart ready event
      Snipcart.events.on('cart.ready', (cart) => {
        console.log('Cart ready event:', cart);
        checkAndDisplayCart();
      });
    });
    
    // Function to check cart and display detailed view with retry mechanism
    function checkAndDisplayCart(retryCount = 0) {
      console.log('checkAndDisplayCart called, retry:', retryCount);
      console.log('window.Snipcart exists:', !!window.Snipcart);
      console.log('Snipcart.api exists:', !!(window.Snipcart && window.Snipcart.api));
      console.log('Snipcart.api.cart exists:', !!(window.Snipcart && window.Snipcart.api && window.Snipcart.api.cart));
      
      if (window.Snipcart && Snipcart.api && Snipcart.api.cart) {
        try {
          console.log('Attempting to get cart items...');
          console.log('Available cart methods:', Object.keys(Snipcart.api.cart));
          
          // Get cart data using the correct Snipcart v3 API
          let items = [];
          let total = 0;
          
          // Method 1: Use Snipcart.api.cart.items.all() - the correct API method
          try {
            console.log('Attempting Snipcart.api.cart.items.all()...');
            if (Snipcart.api.cart.items && Snipcart.api.cart.items.all) {
              items = Snipcart.api.cart.items.all();
              console.log('Items from .all():', items);
            }
          } catch (e) {
            console.log('Error with .all() method:', e);
          }
          
          // Method 2: Try accessing cart state from store
          try {
            const cartState = Snipcart.store.getState();
            console.log('Full cart state from store:', cartState.cart);
            
            if (cartState.cart) {
              // Get total from store
              if (cartState.cart.total) {
                total = cartState.cart.total.amount || cartState.cart.total || 0;
              }
              
              // Try accessing items from store state with different paths
              if (!items || items.length === 0) {
                const storeItems = cartState.cart.items;
                console.log('Store items object:', storeItems);
                console.log('Store items type:', typeof storeItems);
                console.log('Store items keys:', storeItems ? Object.keys(storeItems) : 'null');
                
                // Try different access patterns for store items
                if (storeItems) {
                  if (Array.isArray(storeItems)) {
                    items = storeItems;
                  } else if (storeItems.items && Array.isArray(storeItems.items)) {
                    items = storeItems.items;
                  } else if (typeof storeItems === 'object' && storeItems.items) {
                    // Access the getter property correctly
                    try {
                      items = storeItems.items;
                      console.log('Items from getter:', items);
                      console.log('Items from getter type:', typeof items);
                      console.log('Items from getter is array:', Array.isArray(items));
                      if (items && typeof items === 'object') {
                        console.log('Items from getter keys:', Object.keys(items));
                      }
                    } catch (e) {
                      console.log('Error accessing items getter:', e);
                    }
                  }
                }
              }
            }
          } catch (e) {
            console.log('Error accessing store state:', e);
          }
          
          // Method 3: Try direct cart.items property access
          try {
            if (!items || items.length === 0) {
              const directItems = Snipcart.api.cart.items;
              console.log('Direct cart.items:', directItems);
              
              if (Array.isArray(directItems)) {
                items = directItems;
              } else if (directItems && typeof directItems === 'object') {
                // Check if it has enumerable properties that look like items
                const itemKeys = Object.keys(directItems).filter(key => 
                  !isNaN(parseInt(key)) || key === 'items'
                );
                console.log('Item keys found:', itemKeys);
                
                if (itemKeys.length > 0) {
                  items = itemKeys.map(key => directItems[key]).filter(item => 
                    item && typeof item === 'object' && item.id
                  );
                }
              }
            }
          } catch (e) {
            console.log('Error with direct access:', e);
          }
          
          const itemCount = items.length;
          
          console.log('Cart data:');
          console.log('- Items array:', items);
          console.log('- Items length:', items ? items.length : 'null');
          console.log('- Item count:', itemCount);
          console.log('- Total:', total);
          
          if (items && items.length > 0) {
            console.log('Cart has items, showing detailed view');
            
            // Find the DOM elements
            const cartFallback = document.getElementById('cart-fallback');
            const detailedCart = document.getElementById('detailed-cart');
            
            console.log('cart-fallback element:', cartFallback);
            console.log('detailed-cart element:', detailedCart);
            
            // Show detailed cart
            if (cartFallback) {
              cartFallback.style.display = 'none';
              cartFallback.style.visibility = 'hidden';
            }
            if (detailedCart) {
              detailedCart.style.display = 'block';
              detailedCart.style.visibility = 'visible';
              detailedCart.style.opacity = '1';
            }
            
            // Update cart items
            updateCartDisplay(items, total);
            
            // Verify DOM state after updates
            setTimeout(() => {
              console.log('After display update:');
              console.log('- cart-fallback display:', cartFallback?.style.display);
              console.log('- detailed-cart display:', detailedCart?.style.display);
              console.log('- detailed-cart visibility:', detailedCart?.style.visibility);
              const itemsContainer = document.getElementById('cart-items-detailed');
              console.log('- cart-items-detailed innerHTML length:', itemsContainer?.innerHTML?.length);
            }, 100);
          } else {
            console.log('Cart is empty, showing empty state');
            // Show empty cart
            const cartFallback = document.getElementById('cart-fallback');
            const detailedCart = document.getElementById('detailed-cart');
            
            if (cartFallback) cartFallback.style.display = 'block';
            if (detailedCart) detailedCart.style.display = 'none';
          }
        } catch (error) {
          console.error('Error checking cart:', error);
          // Show empty cart on error
          document.getElementById('cart-fallback').style.display = 'block';
          document.getElementById('detailed-cart').style.display = 'none';
        }
      } else {
        console.log('Snipcart API not ready yet, retry count:', retryCount);
        console.log('- Snipcart object:', window.Snipcart);
        console.log('- Snipcart.api:', window.Snipcart?.api);
        console.log('- Snipcart.api.cart:', window.Snipcart?.api?.cart);
        
        if (retryCount < 10) {
          // Retry after 500ms, up to 10 times
          setTimeout(() => {
            checkAndDisplayCart(retryCount + 1);
          }, 500);
        } else {
          // Show empty cart if API still not ready after retries
          console.log('Snipcart API failed to initialize after retries');
          document.getElementById('cart-fallback').style.display = 'block';
          document.getElementById('detailed-cart').style.display = 'none';
        }
      }
    }
    
    // Function to update cart display
    function updateCartDisplay(items, total) {
      console.log('updateCartDisplay called with:', items, total);
      const cartItemsContainer = document.getElementById('cart-items-detailed');
      const cartTotalElement = document.getElementById('cart-total');
      
      if (!cartItemsContainer) {
        console.error('cart-items-detailed element not found');
        return;
      }
      
      if (!cartTotalElement) {
        console.error('cart-total element not found');
        return;
      }
      
      // Clear existing items
      cartItemsContainer.innerHTML = '';
      
      // Add each item
      items.forEach((item, index) => {
        console.log(`Item ${index}:`, item);
        console.log(`Item keys:`, Object.keys(item));
        
        // Handle Snipcart getter/setter properties
        let itemName, itemPrice, itemQuantity, itemImage, itemDescription;
        
        try {
          // Access getter properties safely
          itemName = (typeof item.name === 'function' ? item.name() : item.name) || item.title || item.definition?.name || 'Unknown Item';
          itemPrice = (typeof item.price === 'function' ? item.price() : item.price) || item.unitPrice || item.definition?.price || 0;
          itemQuantity = (typeof item.quantity === 'function' ? item.quantity() : item.quantity) || 1;
          itemImage = (typeof item.image === 'function' ? item.image() : item.image) || item.definition?.image || 'https://placehold.co/64x64/EEE/31343C?text=Item';
          itemDescription = (typeof item.description === 'function' ? item.description() : item.description) || item.definition?.description || '';
          
          console.log(`Item ${index} properties:`, {
            name: itemName,
            price: itemPrice,
            quantity: itemQuantity,
            image: itemImage,
            description: itemDescription
          });
        } catch (e) {
          console.error(`Error accessing item ${index} properties:`, e);
          // Fallback values
          itemName = 'Unknown Item';
          itemPrice = 0;
          itemQuantity = 1;
          itemImage = 'https://placehold.co/64x64/EEE/31343C?text=Item';
          itemDescription = '';
        }
        
        const itemElement = document.createElement('div');
        itemElement.className = 'flex items-center space-x-4 p-4 border border-gray-200 dark:border-gray-700 rounded-lg';
        itemElement.innerHTML = `
          <img src="${itemImage}" alt="${itemName}" class="w-16 h-16 object-cover rounded">
          <div class="flex-1">
            <h4 class="font-medium text-gray-900 dark:text-white">${itemName}</h4>
            <p class="text-sm text-gray-500 dark:text-gray-400">${itemDescription}</p>
            <p class="text-sm font-medium text-gray-900 dark:text-white">£${itemPrice} x ${itemQuantity}</p>
          </div>
          <div class="text-right">
            <p class="font-medium text-gray-900 dark:text-white">£${(itemPrice * itemQuantity).toFixed(2)}</p>
          </div>
        `;
        cartItemsContainer.appendChild(itemElement);
      });
      
      // Update total
      cartTotalElement.textContent = `£${total.toFixed(2)}`;
      console.log('Cart display updated successfully');
    }
    
    // Fallback cart functionality for testing without Snipcart
    function setupFallbackCart() {
      const addToCartButtons = document.querySelectorAll('.snipcart-add-item');
      addToCartButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          if (!window.Snipcart) {
            e.preventDefault();
            const itemName = button.getAttribute('data-item-name');
            showNotification(`${itemName} would be added to cart (Snipcart not loaded)`, 'warning');
          }
        });
      });
    }
    
    // Simple notification system
    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-md text-white text-sm font-medium transition-all duration-300 transform translate-x-full`;
      
      switch (type) {
        case 'success':
          notification.className += ' bg-green-600';
          break;
        case 'error':
          notification.className += ' bg-red-600';
          break;
        case 'warning':
          notification.className += ' bg-yellow-600';
          break;
        default:
          notification.className += ' bg-blue-600';
      }
      
      notification.textContent = message;
      document.body.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
        notification.classList.remove('translate-x-full');
      }, 100);
      
      // Remove after 3 seconds
      setTimeout(() => {
        notification.classList.add('translate-x-full');
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 3000);
    }
    
    // Initialize fallback cart
    setupFallbackCart();
    
    // Setup currency conversion for cart page
    function updateCurrency() {
      const currentCurrency = localStorage.getItem('currency') || 'GBP';
      if (currentCurrency !== 'GBP' && window.Snipcart) {
        // Update Snipcart currency
        Snipcart.api.currency.set(currentCurrency.toLowerCase());
      }
    }
    
    // Listen for currency changes
    window.addEventListener('currency-change', updateCurrency);
    
    // Initialize currency
    updateCurrency();
    
    // Handle custom checkout buttons
    document.addEventListener('click', (e) => {
      if (e.target.id === 'custom-checkout-btn' || e.target.id === 'sidebar-checkout-btn') {
        e.preventDefault();
        handleCustomCheckout();
      } else if (e.target.id === 'quick-view-cart-btn') {
        e.preventDefault();
        openQuickViewCart();
      }
    });
    
    // Prevent all default Snipcart checkout behavior
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('snipcart-checkout')) {
        e.preventDefault();
        e.stopPropagation();
        handleCustomCheckout();
      }
    }, true);
    
    // Custom checkout function
    function handleCustomCheckout() {
      if (window.Snipcart) {
        if (Snipcart.api) {
          processCheckout();
        } else {
          document.addEventListener('snipcart.ready', processCheckout);
        }
      } else {
        showNotification('Snipcart not loaded', 'error');
      }
    }
    
    function processCheckout() {
      if (window.Snipcart && Snipcart.api && Snipcart.api.cart) {
        try {
          let items = [];
          let total = 0;
          
          console.log('processCheckout: Starting checkout process');
          
          // Use the same successful pattern as the display function
          try {
            // Method 1: Try Snipcart.api.cart.items.all()
            if (Snipcart.api.cart.items && Snipcart.api.cart.items.all) {
              items = Snipcart.api.cart.items.all();
              console.log('processCheckout: Items from .all():', items);
            }
          } catch (e) {
            console.log('processCheckout: Error with .all() method:', e);
          }
          
          // Method 2: Try accessing from store state (like successful display function)
          try {
            const cartState = Snipcart.store.getState();
            console.log('processCheckout: Full cart state:', cartState.cart);
            
            if (cartState.cart) {
              // Get total from store
              if (cartState.cart.total) {
                total = cartState.cart.total.amount || cartState.cart.total || 0;
              }
              
              // Try accessing items from store state if not found yet
              if (!items || items.length === 0) {
                const storeItems = cartState.cart.items;
                console.log('processCheckout: Store items object:', storeItems);
                
                if (storeItems) {
                  if (Array.isArray(storeItems)) {
                    items = storeItems;
                  } else if (storeItems.items && Array.isArray(storeItems.items)) {
                    items = storeItems.items;
                  } else if (typeof storeItems === 'object' && storeItems.items) {
                    // Access the getter property correctly
                    try {
                      items = storeItems.items;
                      console.log('processCheckout: Items from getter:', items);
                    } catch (e) {
                      console.log('processCheckout: Error accessing items getter:', e);
                    }
                  }
                }
              }
            }
          } catch (e) {
            console.log('processCheckout: Error accessing store state:', e);
          }
          
          console.log('Processing checkout - Items:', items.length, 'Total:', total);
          console.log('Processing checkout - Items array:', items);
          
          if (items && items.length > 0) {
            console.log('processCheckout: Cart has items, proceeding to checkout');
            // Store cart data in sessionStorage for checkout page
            sessionStorage.setItem('cartData', JSON.stringify({
              items: items,
              total: total,
              currency: 'GBP'
            }));
            
            // Redirect to checkout page
            window.location.href = '/checkout';
          } else {
            console.log('processCheckout: No items found, showing warning');
            showNotification('Your cart is empty', 'warning');
          }
        } catch (error) {
          console.error('Error processing checkout:', error);
          showNotification('Error accessing cart data', 'error');
        }
      } else {
        console.log('Snipcart API not ready for checkout');
        showNotification('Cart system not ready, please try again', 'warning');
      }
    }
    
    // Function to open quick view cart (Snipcart side modal)
    function openQuickViewCart() {
      if (window.Snipcart) {
        document.addEventListener('snipcart.ready', () => {
          Snipcart.api.modal.show();
        });
      }
    }
    
    // Disable Snipcart checkout completely
    document.addEventListener('snipcart.ready', () => {
      // Override Snipcart's checkout function
      if (window.Snipcart && Snipcart.api && Snipcart.api.checkout) {
        const originalCheckout = Snipcart.api.checkout.open;
        Snipcart.api.checkout.open = function() {
          // Redirect to our custom checkout instead
          handleCustomCheckout();
        };
      }
    });
  });
</script>