---
import { products } from '../data/products';

// Get all unique categories and count products
const categoryCounts = products.reduce((acc, product) => {
  acc[product.category] = (acc[product.category] || 0) + 1;
  return acc;
}, {} as Record<string, number>);

const categories = [
  { 
    name: 'Headphones', 
    slug: 'headphones', 
    count: categoryCounts['Headphones'] || 0,
    icon: 'M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15.536a5 5 0 001.414 1.414m-2.828-9.9a9 9 0 012.828-2.828'
  },
  { 
    name: 'Music', 
    slug: 'music', 
    count: categoryCounts['Music'] || 0,
    icon: 'M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3'
  },
  { 
    name: 'Smart Tech', 
    slug: 'smart-tech', 
    count: categoryCounts['Smart Tech'] || 0,
    icon: 'M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z'
  },
  { 
    name: 'Speakers', 
    slug: 'speakers', 
    count: categoryCounts['Speakers'] || 0,
    icon: 'M15.75 5.25a3 3 0 013 3m0 0a3 3 0 01-3 3M18.75 8.25a1.5 1.5 0 01-1.5 1.5M15.75 8.25a1.5 1.5 0 01-1.5-1.5M12 12.75a4.5 4.5 0 003.75 1.5M9 15L3 9m0 0l6-6M3 9h12.75'
  },
  { 
    name: 'Gadgets', 
    slug: 'gadgets', 
    count: categoryCounts['Gadgets'] || 0,
    icon: 'M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10'
  },
  { 
    name: 'Accessories', 
    slug: 'accessories', 
    count: categoryCounts['Accessories'] || 0,
    icon: 'M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4'
  }
];

// Price ranges
const priceRanges = [
  { label: 'Under £25', min: 0, max: 25 },
  { label: '£25 - £50', min: 25, max: 50 },
  { label: '£50 - £100', min: 50, max: 100 },
  { label: '£100 - £200', min: 100, max: 200 },
  { label: 'Over £200', min: 200, max: Infinity }
];

// Brands (extract from product names for demo)
const brands = ['Apple', 'Samsung', 'Sony', 'Bose', 'JBL', 'Anker', 'Logitech', 'Beats'];
---

<aside class="w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 h-full">
  <div class="p-6 space-y-6">
    <!-- Categories -->
    <div>
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Categories</h3>
      <nav class="space-y-1">
        {categories.map((category) => (
          <a 
            href={`/categories/${category.slug}`}
            class="group flex items-center justify-between rounded-md px-3 py-2 text-sm font-medium text-gray-600 hover:bg-gray-50 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-700 dark:hover:text-white"
          >
            <div class="flex items-center">
              <svg class="mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500 dark:text-gray-500 dark:group-hover:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={category.icon} />
              </svg>
              {category.name}
            </div>
            <span class="text-xs text-gray-400 dark:text-gray-500">({category.count})</span>
          </a>
        ))}
      </nav>
    </div>

    <!-- Price Filter -->
    <div>
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Price Range</h3>
      <div class="space-y-2">
        {priceRanges.map((range) => (
          <label class="flex items-center">
            <input
              type="checkbox"
              class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded dark:border-gray-600 dark:bg-gray-700"
              data-price-min={range.min}
              data-price-max={range.max}
            />
            <span class="ml-2 text-sm text-gray-600 dark:text-gray-300">{range.label}</span>
          </label>
        ))}
      </div>
    </div>

    <!-- Brand Filter -->
    <div>
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Brands</h3>
      <div class="space-y-2 max-h-48 overflow-y-auto">
        {brands.map((brand) => (
          <label class="flex items-center">
            <input
              type="checkbox"
              class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded dark:border-gray-600 dark:bg-gray-700"
              data-brand={brand}
            />
            <span class="ml-2 text-sm text-gray-600 dark:text-gray-300">{brand}</span>
          </label>
        ))}
      </div>
    </div>

    <!-- Rating Filter -->
    <div>
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Customer Rating</h3>
      <div class="space-y-2">
        {[5, 4, 3, 2, 1].map((rating) => (
          <label class="flex items-center">
            <input
              type="checkbox"
              class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded dark:border-gray-600 dark:bg-gray-700"
              data-rating={rating}
            />
            <div class="ml-2 flex items-center">
              {Array.from({ length: 5 }, (_, i) => (
                <svg 
                  class={`h-4 w-4 ${i < rating ? 'text-yellow-400' : 'text-gray-300'}`} 
                  fill="currentColor" 
                  viewBox="0 0 20 20"
                >
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
              ))}
              <span class="ml-1 text-sm text-gray-600 dark:text-gray-300">& up</span>
            </div>
          </label>
        ))}
      </div>
    </div>

    <!-- Clear Filters -->
    <div class="pt-4 border-t border-gray-200 dark:border-gray-700">
      <button 
        id="clear-filters"
        class="w-full rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
      >
        Clear All Filters
      </button>
    </div>
  </div>
</aside>

<script>
  // Filter functionality
  document.addEventListener('DOMContentLoaded', () => {
    const filterInputs = document.querySelectorAll('aside input[type="checkbox"]');
    const clearFiltersBtn = document.getElementById('clear-filters');

    // Apply filters function
    function applyFilters() {
      const activeFilters = {
        categories: [],
        priceRanges: [],
        brands: [],
        ratings: []
      };

      filterInputs.forEach(input => {
        if (input.checked) {
          if (input.dataset.priceMin !== undefined) {
            activeFilters.priceRanges.push({
              min: parseFloat(input.dataset.priceMin),
              max: parseFloat(input.dataset.priceMax)
            });
          } else if (input.dataset.brand) {
            activeFilters.brands.push(input.dataset.brand);
          } else if (input.dataset.rating) {
            activeFilters.ratings.push(parseInt(input.dataset.rating));
          }
        }
      });

      // Dispatch filter event for other components to listen to
      window.dispatchEvent(new CustomEvent('filters-changed', { 
        detail: activeFilters 
      }));
    }

    // Clear all filters
    function clearAllFilters() {
      filterInputs.forEach(input => {
        input.checked = false;
      });
      applyFilters();
    }

    // Event listeners
    filterInputs.forEach(input => {
      input.addEventListener('change', applyFilters);
    });

    if (clearFiltersBtn) {
      clearFiltersBtn.addEventListener('click', clearAllFilters);
    }
  });
</script>